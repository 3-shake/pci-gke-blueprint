# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
data:
  nginx.conf: |-
    # A single worker is enough for load balancing and reverse proxing.
    # While disk I/O can block an nginx worker, it's possible to enable
    # async read and send for static files.
    #
    worker_processes 1;
    # The limit on the maximum number of open files for worker processes.
    # This overrides the OS limit for the user the workers run as:
    #   ulimit -a | grep 'open files'
    #
    # This value must be equal or higher than the worker_connections value.
    #
    worker_rlimit_nofile 4096;
    # Log to stdout.
    # Use the stdout of init on Docker to get the logs to the log drain.
    #
    error_log /proc/1/fd/1 warn;

    pid /var/run/nginx.pid;

    events {
      # The maximum number of simultaneous connections that can be
      # opened by a worker process. This limit is shared between
      # client connections and upstream connections.
      #
      worker_connections 4096;

      # "on" if nginx worker_processes > 1
      #
      accept_mutex off;
    }

    http {
      server_tokens off;

      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      log_format  main  '[nginx] method=$request_method path=$request_uri '
                        'status=$status duration=$request_time size=$body_bytes_sent '
                        '"$remote_user" "$http_referer" "$http_user_agent"';
      # Log to stdout.
      # Use the stdout of init on Docker to get the logs to the log drain.
      #
      access_log /proc/1/fd/1 main;
      upstream grpcservers {
      # This is the PaymentService container
        server 127.0.0.1:50051;
      }

      server {
        # Listen on whatever port the ILB will send traffic to
        listen 1443 ssl http2;

        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;

        location / {
            grpc_pass grpc://grpcservers;
            error_page 502 = /error502grpc;
        }

        location = /error502grpc {
            internal;
            default_type application/grpc;
            add_header grpc-status 14;
            add_header grpc-message "unavailable";
            return 204;
        }
      }
    }


